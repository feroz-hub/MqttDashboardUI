@page
@model IndexModel
@{
    ViewData["Title"] = "MQTT Subscriber";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/Index.css">
</head>
<body>
<div class="index-container">
    <div class="index-sidebar">
        <h3>Subscribed Topics (@Model.SubscribedTopics.Count())</h3>
        <form method="post">
            <label for="topic">Enter Topic:</label>
            <input type="text" id="topic" name="topic" required>
            <button type="submit">Subscribe</button>
        </form>

        @if (Model.ErrorMessage != null)
        {
            <div class="error-message">@Model.ErrorMessage</div>
        }

        <ul>
            @foreach (var topic in Model.SubscribedTopics)
            {
                <li>@topic <span>@Model.GetMessageCountForTopic(topic)</span></li>
            }
        </ul>
    </div>
    <div class="index-content">
        <h2>MQTT Subscriber</h2>
        <h3>Messages</h3>
        <ul id="messagesList">
            @foreach (var message in Model.Messages)
            {
                <li>@message</li>
            }
        </ul>
    </div>
</div>
</body>
</html>

<script>
    async function fetchMessages() {
        const response = await fetch('@Url.Page("/Index", "Messages")');
        const messages = await response.json();
        const messagesList = document.getElementById('messagesList');
        messagesList.innerHTML = '';

        messages.forEach(message => {
            const li = document.createElement('li');
            li.textContent = message;
            messagesList.appendChild(li);
        });
    }
    async function fetchSubscribedTopics() {
        const response = await fetch('@Url.Page("/Index", "SubscribedTopics")');
        const topics = await response.json();
        const topicsList = document.querySelector('.index-sidebar ul');
        topicsList.innerHTML = '';

        topics.forEach(topic => {
            const li = document.createElement('li');
            li.innerHTML = `${topic} <span>${getMessageCountForTopic(topic)}</span>`;
            topicsList.appendChild(li);
        });
    }
    

    async function getMessageCountForTopic(topic) {
        const response = await fetch(`@Url.Page("/Index", "MessageCountForTopic")?topic=${topic}`);
        const count = await response.json();
        return count;
    }

    setInterval(() => {
        fetchMessages();
        fetchSubscribedTopics();
    }, 500); </script>